import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from collections import defaultdict
from datetime import datetime, timedelta

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –í–°–¢–ê–í–¨–¢–ï –í–ê–® –¢–û–ö–ï–ù –ó–î–ï–°–¨
TOKEN = "7926852495:AAFVySjZVau5_sxafIPKMeBRDFmehiIbDxI"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –î–∞–Ω–Ω—ã–µ
user_data = defaultdict(lambda: {"balance": 0, "referrals": 0, "last_bonus": None})
admin_ids = [5083696616]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def main_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üéÆ –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop"),
        InlineKeyboardButton("üèÜ –¢–æ–ø-10", callback_data="top"),
        InlineKeyboardButton("üì¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="referral"),
        InlineKeyboardButton("üéÅ –ó–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å", callback_data="claim_bonus"),
        InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    )
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
def profile_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É", url="https://t.me/xrocket?start=inv_GhSTKJGeBcaVcHg"),  # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
        InlineKeyboardButton("üéÆ –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="shop"),   # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")
    )
    return keyboard

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ–Ω—É—Å
def can_claim_bonus(user_id):
    last_bonus = user_data[user_id]["last_bonus"]
    if last_bonus is None:
        return True
    return datetime.now() - last_bonus >= timedelta(hours=6)

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user_id = message.from_user.id
    args = message.get_args()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    if args and args.startswith("ref"):
        referrer_id = int(args[3:])
        if referrer_id != user_id:  # –ù–µ–ª—å–∑—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
            user_data[referrer_id]["referrals"] += 1
            user_data[referrer_id]["balance"] += 2  # –ë–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            await bot.send_message(referrer_id, f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! +2 Ma3coin!")

    user_data[user_id]["balance"] += 5  # –ë–æ–Ω—É—Å –∑–∞ —Å—Ç–∞—Ä—Ç
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à–∏ –±–æ–Ω—É—Å–Ω—ã–µ 5 Ma3coin –∑–∞ —Å—Ç–∞—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã!", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
@dp.callback_query_handler(Text(equals="profile"))
async def profile_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    balance = user_data[user_id]["balance"]
    referrals = user_data[user_id]["referrals"]
    await callback_query.message.edit_text(
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} Ma3coin\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals}\n",
        reply_markup=profile_menu()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω
@dp.callback_query_handler(Text(equals="shop"))
async def shop_handler(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("üõí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!", reply_markup=main_menu())

# –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤
@dp.callback_query_handler(Text(equals="claim_bonus"))
async def claim_bonus_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if can_claim_bonus(user_id):
        user_data[user_id]["balance"] += 3  # –ë–æ–Ω—É—Å
        user_data[user_id]["last_bonus"] = datetime.now()
        await callback_query.message.edit_text("üéÅ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–ª–∏ –±–æ–Ω—É—Å –≤ 3 Ma3coin!", reply_markup=main_menu())
    else:
        await callback_query.message.edit_text("‚ùå –í—ã —É–∂–µ –∑–∞–±–∏—Ä–∞–ª–∏ –±–æ–Ω—É—Å! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu())

# –ê–¥–º–∏–Ω –º–µ–Ω—é
@dp.message_handler(commands=['creator148852'])
async def admin_command(message: types.Message):
    if message.from_user.id in admin_ids:
        await message.answer("üîë –ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=admin_menu())
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é.")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω –º–µ–Ω—é
def admin_menu():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üí∞ –ù–∞—á–∏—Å–ª–∏—Ç—å –º–æ–Ω–µ—Ç—ã", callback_data="admin_add_coins"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")
    )
    return keyboard

# –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç (–∞–¥–º–∏–Ω)
@dp.callback_query_handler(Text(equals="admin_add_coins"))
async def admin_add_coins(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("üí∞ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∏—Å–ª–∏—Ç—å –º–æ–Ω–µ—Ç—ã:")
    await AdminStates.waiting_for_user_id.set()

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

class AdminStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_amount = State()

@dp.message_handler(state=AdminStates.waiting_for_user_id)
async def process_user_id(message: types.Message, state: FSMContext):
    user_id = message.text.strip()
    if user_id.isdigit():
        user_id = int(user_id)
        if user_id in user_data:
            await state.update_data(user_id=user_id)
            await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω! –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:")
            await AdminStates.waiting_for_amount.set()
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

@dp.message_handler(state=AdminStates.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    amount = message.text.strip()
    if amount.isdigit():
        amount = int(amount)
        data = await state.get_data()
        user_id = data['user_id']
        user_data[user_id]["balance"] += amount
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} Ma3coin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.", reply_markup=main_menu())
        await state.finish()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

# –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
async def keep_alive():
    while True:
        await asyncio.sleep(60)

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(keep_alive())  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
    executor.start_polling(dp, skip_updates=True)
