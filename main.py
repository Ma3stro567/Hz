import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from collections import defaultdict
import os
from datetime import datetime, timedelta

# üîπ –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# ‚úÖ –í–ê–ñ–ù–û! –í–°–¢–ê–í–¨–¢–ï –í–ê–® –¢–û–ö–ï–ù –û–¢ BOTFATHER:
TOKEN = "7926852495:AAFVySjZVau5_sxafIPKMeBRDFmehiIbDxI"  # ‚¨Ö –°–Æ–î–ê –í–°–¢–ê–í–¨–¢–ï –¢–û–ö–ï–ù!

# ‚õî –ï—Å–ª–∏ –±–æ—Ç –Ω–∞ Render, –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:
# TOKEN = os.getenv("BOT_TOKEN")  # ‚¨Ö –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≠–¢–û –Ω–∞ Render!

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# üîπ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = defaultdict(lambda: {"balance": 0, "referrals": 0, "last_bonus": None})
referral_links = {}

# üîë ID –∞–¥–º–∏–Ω–∞ (–í–ê–® TELEGRAM ID)
ADMIN_ID = 5083696616  # ‚¨Ö –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID!

# üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
def generate_referral_link(user_id):
    return f"https://t.me/YourBotUsername?start=ref{user_id}"

# üéõ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(InlineKeyboardButton("üéÆ –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop"))
    keyboard.add(InlineKeyboardButton("üèÜ –¢–æ–ø-10", callback_data="top"))
    keyboard.add(InlineKeyboardButton("üì¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="referral"))
    keyboard.add(InlineKeyboardButton("üéÅ –ó–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å", callback_data="claim_bonus"))
    return keyboard

# üéÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ–Ω—É—Å
def can_claim_bonus(user_id):
    last_bonus = user_data[user_id]["last_bonus"]
    return last_bonus is None or datetime.now() - last_bonus >= timedelta(hours=6)

# üè† –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user_id = message.from_user.id
    args = message.get_args()

    # üì¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    if args and args.startswith("ref"):
        referrer_id = int(args[3:])
        if referrer_id != user_id:  # –ù–µ–ª—å–∑—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
            user_data[referrer_id]["referrals"] += 1
            user_data[referrer_id]["balance"] += 2  # –ë–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            await bot.send_message(referrer_id, f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! +2 Ma3coin!")

    user_data[user_id]["balance"] += 5  # –ë–æ–Ω—É—Å –∑–∞ —Å—Ç–∞—Ä—Ç
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à–∏ –±–æ–Ω—É—Å–Ω—ã–µ 5 Ma3coin –∑–∞ —Å—Ç–∞—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã!", reply_markup=main_menu())

# üõ† **–ê–î–ú–ò–ù-–ú–ï–ù–Æ**
@dp.message_handler(commands=['creator148852'])
async def admin_command(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("üîë –ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=admin_menu())
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

# üéõ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–º–µ–Ω—é
def admin_menu():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("üí∞ –ù–∞—á–∏—Å–ª–∏—Ç—å –º–æ–Ω–µ—Ç—ã", callback_data="admin_add_balance"))
    return keyboard

# üì© –ó–∞–ø—Ä–æ—Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç
@dp.callback_query_handler(Text(equals="admin_add_balance"))
async def admin_add_balance(callback_query: types.CallbackQuery):
    if callback_query.from_user.id == ADMIN_ID:
        await callback_query.message.answer("üîπ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∏—Å–ª–∏—Ç—å –º–æ–Ω–µ—Ç—ã:")
        await callback_query.answer()

# üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(lambda message: message.text.isdigit())
async def get_user_id(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        user_id = int(message.text)
        if user_id in user_data:
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω! –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:")
            user_data[user_id]["waiting_for_amount"] = True  # –§–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã
            user_data[user_id]["temp_user_id"] = user_id
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
@dp.message_handler(lambda message: message.text.replace('.', '', 1).isdigit())
async def add_balance(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        user_id = user_data[message.from_user.id].get("temp_user_id")
        if user_id:
            amount = float(message.text)
            user_data[user_id]["balance"] += amount
            await message.answer(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} Ma3coin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}!")
            user_data[user_id].pop("waiting_for_amount", None)
            user_data[user_id].pop("temp_user_id", None)

# üîÑ –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è Render (—á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –≤—ã–∫–ª—é—á–∞–ª—Å—è)
async def keep_alive():
    while True:
        await asyncio.sleep(60)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(keep_alive())  # ‚¨Ö –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞ Render
    executor.start_polling(dp, skip_updates=True)
    
