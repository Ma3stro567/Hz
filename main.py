import os
import asyncio
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞–ø—Ä—è–º—É—é (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è production-–æ–∫—Ä—É–∂–µ–Ω–∏—è)
API_TOKEN = "7667087861:AAHF20MiMg0BrR_Fd3nlXFTsniqbxHd3JZc"
ADMIN_PASSWORD = "popopo12"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –∞–≤—Ç–æ–∑–∞–¥–∞—á–∞—Ö –∏ –∞–¥–º–∏–Ω-—Å–µ—Å—Å–∏—è—Ö
users = {}
auto_tasks = {}
admin_sessions = {}

def get_main_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üñ±Ô∏è –ö–ª–∏–∫", callback_data="click")],
        [InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")],
        [InlineKeyboardButton("üèÜ –¢–æ–ø—ã", callback_data="tops")],
        [InlineKeyboardButton("üéÅ –†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data="referral")]
    ])

# ----- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start -----
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    ref = message.get_args()
    user_id = message.from_user.id

    if user_id not in users:
        users[user_id] = {
            'clicks': 0,
            'upgrades': 1,
            'cooldown': 0,
            'clicks_in_row': 0,
            'referrals': 0,
            'in_pause': False,
            'autoclick': 0
        }
        if ref.isdigit() and int(ref) in users and int(ref) != user_id:
            users[int(ref)]['clicks'] += 100
            users[int(ref)]['referrals'] += 1
            await bot.send_message(int(ref), f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! +100 –∫–ª–∏–∫–æ–≤!")

    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª–∏–∫–µ—Ä-–±–æ—Ç! üêπ", reply_markup=get_main_kb())

async def update_main_menu(callback, user_id):
    user = users[user_id]
    msg = (
        f"üñ±Ô∏è –¢—ã –Ω–∞–∫–ª–∏–∫–∞–ª: {user['clicks']} –∫–ª–∏–∫–æ–≤\n"
        f"üí• –°–∏–ª–∞ –∫–ª–∏–∫–∞: {user['upgrades']}\n"
        f"ü§ñ –ê–≤—Ç–æ–∫–ª–∏–∫: {user.get('autoclick', 0)}"
    )
    await callback.message.edit_text(msg, reply_markup=get_main_kb())

# ----- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–ª–∏–∫" -----
@dp.callback_query_handler(lambda c: c.data == 'click')
async def click_handler(callback: types.CallbackQuery):
    user = users[callback.from_user.id]
    if user.get('in_pause'):
        await callback.answer("‚åõ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")
        return
    user['clicks'] += user['upgrades']
    user['clicks_in_row'] += 1
    if user['clicks_in_row'] >= 10:
        user['in_pause'] = True
        await callback.answer("‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã...")
        await asyncio.sleep(3)
        user['clicks_in_row'] = 0
        user['in_pause'] = False
    await update_main_menu(callback, callback.from_user.id)

# ----- –ú–∞–≥–∞–∑–∏–Ω -----
@dp.callback_query_handler(lambda c: c.data == 'shop')
async def shop_handler(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üí™ –£–ª—É—á—à–∏—Ç—å –∫–ª–∏–∫", callback_data="upgrade_click")],
        [InlineKeyboardButton("‚ö° –£–º–µ–Ω—å—à–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É ‚Äî 3000", callback_data="reduce_cd")],
        [InlineKeyboardButton("üé≤ –°–µ–∫—Ä–µ—Ç–Ω—ã–π –±–æ–∫—Å ‚Äî 400", callback_data="secret_box")],
        [InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ–∫–ª–∏–∫ ‚Äî 200", callback_data="buy_autoclick")],
        [InlineKeyboardButton("üîÅ –£–ª—É—á—à–∏—Ç—å –∞–≤—Ç–æ–∫–ª–∏–∫ x2", callback_data="upgrade_autoclick")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])
    await callback.message.edit_text("üõí –ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'upgrade_click')
async def upgrade_click(callback: types.CallbackQuery):
    user = users[callback.from_user.id]
    upgrade_prices = [100, 200, 300, 500, 700, 1000]
    current_level = user['upgrades'] - 1
    if current_level >= len(upgrade_prices):
        await callback.answer("üîù –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–ª–∏–∫–∞!")
        return
    price = upgrade_prices[current_level]
    if user['clicks'] >= price:
        user['clicks'] -= price
        user['upgrades'] += 1
        await callback.answer(f"‚úÖ –ö–ª–∏–∫ —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è {user['upgrades']}!")
    else:
        await callback.answer(f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–ª–∏–∫–æ–≤! –ù—É–∂–Ω–æ {price}.")
    await shop_handler(callback)

@dp.callback_query_handler(lambda c: c.data == 'reduce_cd')
async def reduce_cd(callback: types.CallbackQuery):
    user = users[callback.from_user.id]
    if user['clicks'] >= 3000:
        user['clicks'] -= 3000
        user['cooldown'] = max(0.1, user['cooldown'] - 1)
        await callback.answer("‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∞!")
    else:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–∫–æ–≤!")
    await shop_handler(callback)

@dp.callback_query_handler(lambda c: c.data == 'secret_box')
async def secret_box(callback: types.CallbackQuery):
    user = users[callback.from_user.id]
    if user['clicks'] >= 400:
        user['clicks'] -= 400
        reward = random.randint(1, 1000)
        user['clicks'] += reward
        await callback.answer(f"üéÅ –ë–æ–∫—Å –≤—ã–¥–∞–ª —Ç–µ–±–µ {reward} –∫–ª–∏–∫–æ–≤!")
    else:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–∫–æ–≤!")
    await shop_handler(callback)

@dp.callback_query_handler(lambda c: c.data == 'buy_autoclick')
async def buy_autoclick(callback: types.CallbackQuery):
    user = users[callback.from_user.id]
    if user['clicks'] >= 200:
        user['clicks'] -= 200
        user['autoclick'] = 1
        if callback.from_user.id not in auto_tasks:
            auto_tasks[callback.from_user.id] = asyncio.create_task(start_autoclick(callback.from_user.id))
        await callback.answer("‚úÖ –ê–≤—Ç–æ–∫–ª–∏–∫ –∫—É–ø–ª–µ–Ω!")
    else:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–∫–æ–≤!")
    await shop_handler(callback)

@dp.callback_query_handler(lambda c: c.data == 'upgrade_autoclick')
async def upgrade_autoclick(callback: types.CallbackQuery):
    user = users[callback.from_user.id]
    level = user.get('autoclick', 0)
    price = 200 * (2 ** level)
    if user['clicks'] >= price:
        user['clicks'] -= price
        user['autoclick'] += 1
        await callback.answer(f"‚úÖ –ê–≤—Ç–æ–∫–ª–∏–∫ —É–ª—É—á—à–µ–Ω –¥–æ {user['autoclick']}!")
    else:
        await callback.answer("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–ª–∏–∫–æ–≤!")
    await shop_handler(callback)

async def start_autoclick(user_id):
    while True:
        await asyncio.sleep(30)
        if user_id in users and users[user_id].get('autoclick', 0) > 0:
            users[user_id]['clicks'] += users[user_id]['autoclick']

@dp.callback_query_handler(lambda c: c.data == 'tops')
async def tops_handler(callback: types.CallbackQuery):
    top_clicks = sorted(users.items(), key=lambda x: x[1]['clicks'], reverse=True)[:5]
    top_refs = sorted(users.items(), key=lambda x: x[1]['referrals'], reverse=True)[:5]
    text = "üèÜ –¢–æ–ø –ø–æ –∫–ª–∏–∫–∞–º:\n"
    for i, (uid, data) in enumerate(top_clicks, start=1):
        chat = await bot.get_chat(uid)
        name = f"@{chat.username}" if chat.username else chat.full_name
        text += f"{i}. {name} ‚Äî {data['clicks']} –∫–ª–∏–∫–æ–≤\n"
    text += "\nüë• –¢–æ–ø –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:\n"
    for i, (uid, data) in enumerate(top_refs, start=1):
        chat = await bot.get_chat(uid)
        name = f"@{chat.username}" if chat.username else chat.full_name
        text += f"{i}. {name} ‚Äî {data['referrals']} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"))
    await callback.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'referral')
async def referral_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    link = f"https://t.me/{clicker767}?start={user_id}"
    text = f"üéÅ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –ø–æ —Å—Å—ã–ª–∫–µ:\n{link}\n\n–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ ‚Äî 100 –∫–ª–∏–∫–æ–≤!"
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"))
    await callback.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'back_main')
async def back_main(callback: types.CallbackQuery):
    await update_main_menu(callback, callback.from_user.id)

# ----- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å -----
@dp.message_handler(commands=['adminpanel'])
async def admin_panel(message: types.Message):
    await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    admin_sessions[message.from_user.id] = {'stage': 'await_password'}

@dp.message_handler()
async def admin_logic(message: types.Message):
    uid = message.from_user.id
    if uid not in admin_sessions:
        return
    session = admin_sessions[uid]
    if session['stage'] == 'await_password':
        if message.text == ADMIN_PASSWORD:
            session['stage'] = 'await_action'
            kb = InlineKeyboardMarkup()
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–∞–∂–µ –µ—Å–ª–∏ —É –Ω–∏—Ö –Ω–µ—Ç username)
            for uid_, data in users.items():
                chat = await bot.get_chat(uid_)
                name = f"@{chat.username}" if chat.username else f"{chat.full_name} ({uid_})"
                kb.add(InlineKeyboardButton(name, callback_data=f"admin_add:{uid_}"))
            kb.add(InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"))
            await message.answer("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
            del admin_sessions[uid]
    elif session['stage'] == 'await_amount':
        try:
            amount = int(message.text)
            target_id = int(session['target'])
            if target_id in users:
                users[target_id]['clicks'] += amount
                target_chat = await bot.get_chat(target_id)
                name = f"@{target_chat.username}" if target_chat.username else target_chat.full_name
                await message.answer(f"‚úÖ {name} –ø–æ–ª—É—á–∏–ª {amount} –∫–ª–∏–∫–æ–≤.")
            else:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            del admin_sessions[uid]
        except Exception as e:
            await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∫–ª–∏–∫–æ–≤")
    elif session['stage'] == 'broadcast':
        text = message.text
        for uid_ in users:
            try:
                await bot.send_message(uid_, text)
            except Exception as e:
                continue
        await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        del admin_sessions[uid]

@dp.callback_query_handler(lambda c: c.data.startswith("admin_add:") or c.data == "admin_broadcast")
async def admin_buttons(callback: types.CallbackQuery):
    uid = callback.from_user.id
    if uid not in admin_sessions:
        return
    if callback.data.startswith("admin_add:"):
        target_id = callback.data.split("admin_add:")[1]
        admin_sessions[uid] = {'stage': 'await_amount', 'target': target_id}
        target_chat = await bot.get_chat(int(target_id))
        name = f"@{target_chat.username}" if target_chat.username else target_chat.full_name
        await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤ –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è {name}.")
    elif callback.data == "admin_broadcast":
        admin_sessions[uid] = {'stage': 'broadcast'}
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")

# ----- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª -----
async def keep_alive():
    while True:
        await asyncio.sleep(3600)  # –ó–∞—Å—ã–ø–∞–µ–º –Ω–∞ 1 —á–∞—Å

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
    loop.create_task(keep_alive())
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ polling (–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
    executor.start_polling(dp, skip_updates=True)
