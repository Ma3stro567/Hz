import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from collections import defaultdict
import os
from datetime import datetime, timedelta

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –î–∞–Ω–Ω—ã–µ
user_data = defaultdict(lambda: {"balance": 0, "referrals": 0, "last_bonus": None})
referral_links = {}
top_referrals = []
top_balances = []

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
def generate_referral_link(user_id):
    return f"https://t.me/YourBotUsername?start=ref{user_id}"

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def main_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(InlineKeyboardButton("üéÆ –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop"))
    keyboard.add(InlineKeyboardButton("üèÜ –¢–æ–ø-10", callback_data="top"))
    keyboard.add(InlineKeyboardButton("üì¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="referral"))
    keyboard.add(InlineKeyboardButton("üéÅ –ó–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å", callback_data="claim_bonus"))
    return keyboard

# –ú–∞–≥–∞–∑–∏–Ω
def shop_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(InlineKeyboardButton("‚öôÔ∏è –¢–æ–≤–∞—Ä 1 - 10 Ma3coin", callback_data="buy_item_1"))
    keyboard.add(InlineKeyboardButton("‚öôÔ∏è –¢–æ–≤–∞—Ä 2 - 20 Ma3coin", callback_data="buy_item_2"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"))
    return keyboard

# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
def referral_menu(user_id):
    keyboard = InlineKeyboardMarkup()
    referral_link = generate_referral_link(user_id)
    keyboard.add(InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", switch_inline_query=referral_link))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"))
    return keyboard

# –¢–æ–ø-10
def top_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(InlineKeyboardButton("üèÜ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="top_referrals"))
    keyboard.add(InlineKeyboardButton("üí∞ –¢–æ–ø –ø–æ –∫–æ–∏–Ω–∞–º", callback_data="top_balances"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"))
    return keyboard

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ–Ω—É—Å
def can_claim_bonus(user_id):
    last_bonus = user_data[user_id]["last_bonus"]
    if last_bonus is None:
        return True
    return datetime.now() - last_bonus >= timedelta(hours=6)

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user_id = message.from_user.id
    args = message.get_args()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    if args and args.startswith("ref"):
        referrer_id = int(args[3:])
        if referrer_id != user_id:  # –ù–µ–ª—å–∑—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
            user_data[referrer_id]["referrals"] += 1
            user_data[referrer_id]["balance"] += 2  # –ë–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            await bot.send_message(referrer_id, f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! +2 Ma3coin!")

    user_data[user_id]["balance"] += 5  # –ë–æ–Ω—É—Å –∑–∞ —Å—Ç–∞—Ä—Ç
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à–∏ –±–æ–Ω—É—Å–Ω—ã–µ 5 Ma3coin –∑–∞ —Å—Ç–∞—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã!", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(Text(startswith="back_"))
async def back_handler(callback_query: types.CallbackQuery):
    if callback_query.data == "back_main":
        await callback_query.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())

@dp.callback_query_handler(Text(equals="shop"))
async def shop_handler(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("üõí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!", reply_markup=shop_menu())

@dp.callback_query_handler(Text(equals="referral"))
async def referral_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await callback_query.message.edit_text("üì¢ –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", reply_markup=referral_menu(user_id))

@dp.callback_query_handler(Text(equals="top"))
async def top_handler(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("üèÜ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø-–ª–∏—Å—Ç", reply_markup=top_menu())

@dp.callback_query_handler(Text(equals="top_referrals"))
async def top_referrals_handler(callback_query: types.CallbackQuery):
    sorted_refs = sorted(user_data.items(), key=lambda x: x[1]["referrals"], reverse=True)[:10]
    text = "üèÜ –¢–æ–ø-10 –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:\n" + "\n".join([f"{i+1}. {user} - {data['referrals']} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤" for i, (user, data) in enumerate(sorted_refs)])
    await callback_query.message.edit_text(text, reply_markup=top_menu())

@dp.callback_query_handler(Text(equals="top_balances"))
async def top_balances_handler(callback_query: types.CallbackQuery):
    sorted_balances = sorted(user_data.items(), key=lambda x: x[1]["balance"], reverse=True)[:10]
    text = "üí∞ –¢–æ–ø-10 –ø–æ –∫–æ–∏–Ω–∞–º:\n" + "\n".join([f"{i+1}. {user} - {data['balance']} Ma3coin" for i, (user, data) in enumerate(sorted_balances)])
    await callback_query.message.edit_text(text, reply_markup=top_menu())

@dp.callback_query_handler(Text(equals="claim_bonus"))
async def claim_bonus_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if can_claim_bonus(user_id):
        user_data[user_id]["balance"] += 3  # –ë–æ–Ω—É—Å
        user_data[user_id]["last_bonus"] = datetime.now()
        await callback_query.message.edit_text("üéÅ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–ª–∏ –±–æ–Ω—É—Å –≤ 3 Ma3coin!", reply_markup=main_menu())
    else:
        await callback_query.message.edit_text("‚ùå –í—ã —É–∂–µ –∑–∞–±–∏—Ä–∞–ª–∏ –±–æ–Ω—É—Å! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu())

@dp.callback_query_handler(Text(startswith="buy_item_"))
async def buy_item_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    item_id = int(callback_query.data.split("_")[-1])
    item_prices = {1: 10, 2: 20}
    price = item_prices.get(item_id, 0)

    if user_data[user_id]["balance"] >= price:
        user_data[user_id]["balance"] -= price
        await callback_query.message.edit_text(f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä {item_id} –∑–∞ {price} Ma3coin!", reply_markup=shop_menu())
    else:
        await callback_query.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.", reply_markup=shop_menu())

# –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è Render
async def keep_alive():
    while True:
        await asyncio.sleep(60)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(keep_alive())
    executor.start_polling(dp, skip_updates=True)
  
