import asyncio
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor

API_TOKEN = '7667087861:AAGloScjJqqaby3eklIzKDiEldeAaJRxoDE'  # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω
ADMIN_PASSWORD = "popopo12"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

users = {}
admin_sessions = {}

def get_main_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üñ±Ô∏è –ö–ª–∏–∫", callback_data="click")],
        [InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")],
        [InlineKeyboardButton("üèÜ –¢–æ–ø—ã", callback_data="tops")],
        [InlineKeyboardButton("üéÅ –†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data="referral")]
    ])


@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    ref = message.get_args()
    user_id = message.from_user.id

    if user_id not in users:
        users[user_id] = {
            'clicks': 0,
            'upgrades': 1,
            'cooldown': 0,
            'clicks_in_row': 0,
            'referrals': 0,
            'in_pause': False
        }

        if ref.isdigit() and int(ref) in users and int(ref) != user_id:
            users[int(ref)]['clicks'] += 100
            users[int(ref)]['referrals'] += 1
            await bot.send_message(int(ref), f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! +100 –∫–ª–∏–∫–æ–≤!")

    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª–∏–∫–µ—Ä-–±–æ—Ç! üêπ", reply_markup=get_main_kb())


@dp.callback_query_handler(lambda c: c.data == 'click')
async def click_handler(callback: types.CallbackQuery):
    user = users[callback.from_user.id]

    if user.get('in_pause'):
        await callback.answer("‚åõ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")
        return

    user['clicks'] += user['upgrades']
    user['clicks_in_row'] += 1

    if user['clicks_in_row'] >= 10:
        user['in_pause'] = True
        await callback.answer("‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã...")
        await asyncio.sleep(3)
        user['clicks_in_row'] = 0
        user['in_pause'] = False

    await callback.message.edit_text(f"üñ±Ô∏è –¢—ã –Ω–∞–∫–ª–∏–∫–∞–ª: {user['clicks']} –∫–ª–∏–∫–æ–≤", reply_markup=get_main_kb())


@dp.callback_query_handler(lambda c: c.data == 'shop')
async def shop_handler(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üí™ –£–ª—É—á—à–∏—Ç—å –∫–ª–∏–∫ (+1) ‚Äî 100", callback_data="upgrade_click")],
        [InlineKeyboardButton("‚ö° –£–º–µ–Ω—å—à–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É ‚Äî 3000", callback_data="reduce_cd")],
        [InlineKeyboardButton("üé≤ –°–µ–∫—Ä–µ—Ç–Ω—ã–π –±–æ–∫—Å ‚Äî 400", callback_data="secret_box")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])
    await callback.message.edit_text("üõí –ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π:", reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == 'upgrade_click')
async def upgrade_click(callback: types.CallbackQuery):
    user = users[callback.from_user.id]
    if user['clicks'] >= 100:
        user['clicks'] -= 100
        user['upgrades'] += 1
        await callback.answer("‚úÖ –ö–ª–∏–∫ —É–ª—É—á—à–µ–Ω!")
    else:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–∫–æ–≤!")
    await shop_handler(callback)


@dp.callback_query_handler(lambda c: c.data == 'reduce_cd')
async def reduce_cd(callback: types.CallbackQuery):
    user = users[callback.from_user.id]
    if user['clicks'] >= 3000:
        user['clicks'] -= 3000
        user['cooldown'] = max(0, user['cooldown'] - 1)
        await callback.answer("‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∞!")
    else:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–∫–æ–≤!")
    await shop_handler(callback)


@dp.callback_query_handler(lambda c: c.data == 'secret_box')
async def secret_box(callback: types.CallbackQuery):
    user = users[callback.from_user.id]
    if user['clicks'] >= 400:
        user['clicks'] -= 400
        reward = random.randint(1, 1000)
        user['clicks'] += reward
        await callback.answer(f"üéÅ –ë–æ–∫—Å –≤—ã–¥–∞–ª —Ç–µ–±–µ {reward} –∫–ª–∏–∫–æ–≤!")
    else:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–∫–æ–≤!")
    await shop_handler(callback)


@dp.callback_query_handler(lambda c: c.data == 'tops')
async def tops_handler(callback: types.CallbackQuery):
    top_clicks = sorted(users.items(), key=lambda x: x[1]['clicks'], reverse=True)[:5]
    top_refs = sorted(users.items(), key=lambda x: x[1]['referrals'], reverse=True)[:5]

    text = "üèÜ –¢–æ–ø –ø–æ –∫–ª–∏–∫–∞–º:\n"
    for i, (uid, data) in enumerate(top_clicks, start=1):
        user = await bot.get_chat(uid)
        name = f"@{user.username}" if user.username else user.full_name
        text += f"{i}. {name} ‚Äî {data['clicks']} –∫–ª–∏–∫–æ–≤\n"

    text += "\nüë• –¢–æ–ø –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:\n"
    for i, (uid, data) in enumerate(top_refs, start=1):
        user = await bot.get_chat(uid)
        name = f"@{user.username}" if user.username else user.full_name
        text += f"{i}. {name} ‚Äî {data['referrals']} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"

    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"))
    await callback.message.edit_text(text, reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == 'referral')
async def referral_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    link = f"https://t.me/clicker767bot?start={user_id}"  # –í—Å—Ç–∞–≤—å —é–∑–µ—Ä–Ω–µ–π–º —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
    text = f"üéÅ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –ø–æ —Å—Å—ã–ª–∫–µ:\n{link}\n\n–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ ‚Äî 100 –∫–ª–∏–∫–æ–≤!"
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"))
    await callback.message.edit_text(text, reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == 'back_main')
async def back_main(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†", reply_markup=get_main_kb())


# ---------- –ê–¥–º–∏–Ω–∫–∞ ----------

@dp.message_handler(commands=['adminpanel'])
async def admin_panel(message: types.Message):
    await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    admin_sessions[message.from_user.id] = {'stage': 'await_password'}


@dp.message_handler()
async def admin_logic(message: types.Message):
    uid = message.from_user.id
    if uid not in admin_sessions:
        return

    session = admin_sessions[uid]

    if session['stage'] == 'await_password':
        if message.text == ADMIN_PASSWORD:
            session['stage'] = 'await_username'
            await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π!\n–í–≤–µ–¥–∏—Ç–µ @—é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –∫–ª–∏–∫–∏:")
        else:
            del admin_sessions[uid]
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")

    elif session['stage'] == 'await_username':
        if message.text.startswith("@"):
            session['username'] = message.text[1:]
            session['stage'] = 'await_amount'
            await message.answer(f"–°–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤ –≤—ã–¥–∞—Ç—å @{session['username']}?")
        else:
            await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º —Å @")

    elif session['stage'] == 'await_amount':
        try:
            amount = int(message.text)
            session['amount'] = amount

            # –∏—â–µ–º –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É
            for uid_, data in users.items():
                chat = await bot.get_chat(uid_)
                if chat.username == session['username']:
                    users[uid_]['clicks'] += amount
                    await message.answer(f"‚úÖ –í—ã–¥–∞–Ω–æ {amount} –∫–ª–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{session['username']}")
                    break
            else:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

            del admin_sessions[uid]
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∫–ª–∏–∫–æ–≤.")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
