import os
import asyncio
import random
from datetime import date
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiohttp import web  # <-- –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–∏–Ω–≥-—Å–µ—Ä–≤–µ—Ä–∞

API_TOKEN = "7667087861:AAHeg4MpbgJ_pMZ6kc4YcuOiqqsY6u3Bpuw"
ADMIN_PASSWORD = "popopo12"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

users = {}
auto_tasks = {}
admin_sessions = {}

messages_today = 0
current_day = date.today()

class MessageCounterMiddleware(BaseMiddleware):
    async def on_pre_process_message(self, message: types.Message, data: dict):
        global messages_today, current_day
        today = date.today()
        if today != current_day:
            current_day = today
            messages_today = 0
        messages_today += 1

dp.middleware.setup(MessageCounterMiddleware())

def get_main_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üñ±Ô∏è –ö–ª–∏–∫", callback_data="click")],
        [InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")],
        [InlineKeyboardButton("üèÜ –¢–æ–ø—ã", callback_data="tops")],
        [InlineKeyboardButton("üéÅ –†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data="referral")]
    ])

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    ref = message.get_args()
    user_id = message.from_user.id
    if user_id not in users:
        users[user_id] = {
            'clicks': 0,
            'upgrades': 1,
            'cooldown': 0,
            'clicks_in_row': 0,
            'referrals': 0,
            'in_pause': False,
            'autoclick': 0,
            'autoclick_level': 0,
            'username': message.from_user.username or "",
            'full_name': message.from_user.full_name
        }
        if ref.isdigit() and int(ref) in users and int(ref) != user_id:
            users[int(ref)]['clicks'] += 100
            users[int(ref)]['referrals'] += 1
            await bot.send_message(int(ref), "üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! +100 –∫–ª–∏–∫–æ–≤!")
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª–∏–∫–µ—Ä-–±–æ—Ç! üêπ", reply_markup=get_main_kb())

async def update_main_menu(callback, user_id):
    user = users[user_id]
    msg = (
        f"üñ±Ô∏è –¢—ã –Ω–∞–∫–ª–∏–∫–∞–ª: {user['clicks']} –∫–ª–∏–∫–æ–≤\n"
        f"üí• –°–∏–ª–∞ –∫–ª–∏–∫–∞: {user['upgrades']}\n"
        f"ü§ñ –ê–≤—Ç–æ–∫–ª–∏–∫: {user.get('autoclick', 0)}"
    )
    await callback.message.edit_text(msg, reply_markup=get_main_kb())

@dp.callback_query_handler(lambda c: c.data == 'click')
async def click_handler(callback: types.CallbackQuery):
    user = users[callback.from_user.id]
    if user.get('in_pause'):
        await callback.answer("‚åõ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")
        return
    user['clicks'] += user['upgrades']
    user['clicks_in_row'] += 1
    if user['clicks_in_row'] >= 10:
        user['in_pause'] = True
        await callback.answer("‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã...")
        await asyncio.sleep(3)
        user['clicks_in_row'] = 0
        user['in_pause'] = False
    await update_main_menu(callback, callback.from_user.id)

@dp.callback_query_handler(lambda c: c.data == 'shop')
async def shop_handler(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üí™ –£–ª—É—á—à–∏—Ç—å –∫–ª–∏–∫", callback_data="upgrade_click")],
        [InlineKeyboardButton("‚ö° –£–º–µ–Ω—å—à–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É ‚Äî 3000", callback_data="reduce_cd")],
        [InlineKeyboardButton("üé≤ –°–µ–∫—Ä–µ—Ç–Ω—ã–π –±–æ–∫—Å ‚Äî 400", callback_data="secret_box")],
        [InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ–∫–ª–∏–∫ ‚Äî 200", callback_data="buy_autoclick")],
        [InlineKeyboardButton("üîÅ –£–ª—É—á—à–∏—Ç—å –∞–≤—Ç–æ–∫–ª–∏–∫ x2", callback_data="upgrade_autoclick")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])
    await callback.message.edit_text("üõí –ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'upgrade_click')
async def upgrade_click(callback: types.CallbackQuery):
    user = users[callback.from_user.id]
    upgrade_prices = [100, 200, 300, 500, 700, 1000]
    current_level = user['upgrades'] - 1
    if current_level >= len(upgrade_prices):
        await callback.answer("üîù –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–ª–∏–∫–∞!")
        return
    price = upgrade_prices[current_level]
    if user['clicks'] >= price:
        user['clicks'] -= price
        user['upgrades'] += 1
        await callback.answer(f"‚úÖ –ö–ª–∏–∫ —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è {user['upgrades']}!")
    else:
        await callback.answer(f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–ª–∏–∫–æ–≤! –ù—É–∂–Ω–æ {price}.")
    await shop_handler(callback)

@dp.callback_query_handler(lambda c: c.data == 'reduce_cd')
async def reduce_cd(callback: types.CallbackQuery):
    user = users[callback.from_user.id]
    if user['clicks'] >= 3000:
        user['clicks'] -= 3000
        user['cooldown'] = max(0.1, user['cooldown'] - 1)
        await callback.answer("‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∞!")
    else:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–∫–æ–≤!")
    await shop_handler(callback)

@dp.callback_query_handler(lambda c: c.data == 'secret_box')
async def secret_box(callback: types.CallbackQuery):
    user = users[callback.from_user.id]
    if user['clicks'] >= 400:
        user['clicks'] -= 400
        reward = random.randint(1, 1000)
        user['clicks'] += reward
        await callback.answer(f"üéÅ –ë–æ–∫—Å –≤—ã–¥–∞–ª —Ç–µ–±–µ {reward} –∫–ª–∏–∫–æ–≤!")
    else:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–∫–æ–≤!")
    await shop_handler(callback)

@dp.callback_query_handler(lambda c: c.data == 'buy_autoclick')
async def buy_autoclick(callback: types.CallbackQuery):
    user = users[callback.from_user.id]
    if user['clicks'] >= 200:
        user['clicks'] -= 200
        user['autoclick'] = 1
        user['autoclick_level'] = 1
        if callback.from_user.id not in auto_tasks:
            auto_tasks[callback.from_user.id] = asyncio.create_task(start_autoclick(callback.from_user.id))
        await callback.answer("‚úÖ –ê–≤—Ç–æ–∫–ª–∏–∫ –∫—É–ø–ª–µ–Ω!")
    else:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–∫–æ–≤!")
    await shop_handler(callback)

@dp.callback_query_handler(lambda c: c.data == 'upgrade_autoclick')
async def upgrade_autoclick(callback: types.CallbackQuery):
    user = users[callback.from_user.id]
    if user.get('autoclick', 0) == 0:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∫—É–ø–∏—Ç–µ –∞–≤—Ç–æ–∫–ª–∏–∫!")
        return
    if user['autoclick_level'] >= 15:
        await callback.answer("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É–ª—É—á—à–µ–Ω–∏—è –∞–≤—Ç–æ–∫–ª–∏–∫–∞ (15).")
        return
    level = user['autoclick_level']
    fixed_prices = [200, 400, 600, 800, 1000]
    if level <= len(fixed_prices):
        price = fixed_prices[level - 1]
    else:
        price = 1000 + (level - 5) * 200
    if user['clicks'] >= price:
        user['clicks'] -= price
        user['autoclick'] *= 2
        user['autoclick_level'] += 1
        await callback.answer(f"‚úÖ –ê–≤—Ç–æ–∫–ª–∏–∫ —É–ª—É—á—à–µ–Ω –¥–æ x{user['autoclick']} (—É—Ä–æ–≤–µ–Ω—å {user['autoclick_level']}).")
    else:
        await callback.answer("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–ª–∏–∫–æ–≤!")
    await shop_handler(callback)

async def start_autoclick(user_id):
    while True:
        await asyncio.sleep(30)
        if user_id in users and users[user_id].get('autoclick', 0) > 0:
            users[user_id]['clicks'] += users[user_id]['autoclick']

@dp.callback_query_handler(lambda c: c.data == 'tops')
async def tops_handler(callback: types.CallbackQuery):
    top_clicks = sorted(users.items(), key=lambda x: x[1]['clicks'], reverse=True)[:5]
    top_refs = sorted(users.items(), key=lambda x: x[1]['referrals'], reverse=True)[:5]
    text = "üèÜ –¢–æ–ø –ø–æ –∫–ª–∏–∫–∞–º:\n"
    for i, (uid, data) in enumerate(top_clicks, start=1):
        chat = await bot.get_chat(uid)
        name = f"@{chat.username}" if chat.username else chat.full_name
        text += f"{i}. {name} ‚Äî {data['clicks']} –∫–ª–∏–∫–æ–≤\n"
    text += "\nüë• –¢–æ–ø –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:\n"
    for i, (uid, data) in enumerate(top_refs, start=1):
        chat = await bot.get_chat(uid)
        name = f"@{chat.username}" if chat.username else chat.full_name
        text += f"{i}. {name} ‚Äî {data['referrals']} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"))
    await callback.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'referral')
async def referral_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    bot_info = await bot.get_me()
    username = bot_info.username
    link = f"https://t.me/{username}?start={user_id}"
    text = (
        f"üéÅ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –ø–æ —Å—Å—ã–ª–∫–µ:\n{link}\n\n"
        "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ ‚Äî 100 –∫–ª–∏–∫–æ–≤!"
    )
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"))
    await callback.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'back_main')
async def back_main(callback: types.CallbackQuery):
    await update_main_menu(callback, callback.from_user.id)

# ==== –ü–ò–ù–ì-–°–ï–†–í–ï–† –î–õ–Ø RENDER ====
async def handle_ping(request):
    return web.Response(text="Bot is alive!")

app = web.Application()
app.router.add_get("/", handle_ping)

async def start_web_server():
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.environ.get("PORT", 8080)))
    await site.start()

# ==== –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú –ñ–ò–ó–ù–¨ ====
async def keep_alive():
    while True:
        await asyncio.sleep(3600)

# ==== –°–¢–ê–†–¢ –ë–û–¢–ê ====
if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(start_web_server())  # –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
    loop.create_task(keep_alive())
    executor.start_polling(dp, skip_updates=True)
